# C/C++ CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/ for more details
#
# MAINTAINER Kirill Scherba <kirill@scherba.ru>
#
# Versin 0.0.1
#

version: 2
jobs:

  # Build sources at clear ubuntu:16.04 
  # (test build dependences script ci-build-data/build-ubuntu.sh)
  build-ubuntu-clear:
    docker:
      - image: teonet-co-docker-d.bintray.io/ci/ubuntu-git:16.04
    steps:
      - checkout
      - run: git submodule update --init --recursive

      # Install dependences
      - run: if [ -e ci-build-data/build-ubuntu.sh ]; then apt-get install -y sudo && ci-build-data/build-ubuntu.sh; fi

      # Make
      - run: ./autogen.sh --prefix=/usr
      - run: make

      # Test
      - run: make test



  # Build sources at ubuntu_teonet image with preinstalled common dependences 
  # (test quick build) 
  build-ubuntu:
    docker:
      - image: teonet-co-docker-d.bintray.io/ci/ubuntu_teonet
    steps:
      - checkout
      - run: git submodule update --init --recursive

      # Install dependences
      - run: if [ -e ci-build-data/build-ubuntu.sh ]; then apt-get install -y sudo && ci-build-data/build-ubuntu.sh; fi

      # Make
      - run: ./autogen.sh --prefix=/usr
      - run: make

      # Test
      #- run: app/teovpn -?
      - run: make test



  # Build and Publish deb packages and Source doxygen documentation to repository
  # (publishing) 
  publish-ubuntu:
    docker:
      - image: teonet-co-docker-d.bintray.io/ci/ubuntu_teonet
    steps:
      - checkout
      - run: git submodule update --init --recursive

      # Install dependences
      - run: if [ -e ci-build-data/build-ubuntu.sh ]; then apt-get install -y sudo && ci-build-data/build-ubuntu.sh; fi

      # Make
      - run: ./autogen.sh --prefix=/usr
      - run: make

      # Test
      #- run: app/teovpn -?
      - run: make test
      
      # Buid binary deb package
      #- run: git clone git@github.com:teonet-co/ci-build.git
      - run: ci-build/make_package deb


  # Install packages at clear ubuntu:16.04 
  # (test published packages)
  install-ubuntu-clear:
    docker:
      - image: teonet-co-docker-d.bintray.io/ci/ubuntu-git:16.04
    steps:
      # Install Teonet bintray repository
      - run: apt-get update && apt-get install -y sudo apt-transport-https &&
             sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 379CE192D401AB61 &&
             echo "deb https://dl.bintray.com/teonet-co/u bionic main" | sudo tee -a /etc/apt/sources.list &&
             sudo apt-get update

      # Install this application from published packet       
      - run: apt-get install -y libteoccl


  un-tagged-build-centos:
    docker: # run the steps with Docker
      - image: teonet-co-docker-d.bintray.io/ci/centos_teonet # gitlab.ksproject.org:5000/ci/centos_teonet
    steps:
      - checkout
      - run: git submodule update --init --recursive

      # show current variables
      - run: echo $CIRCLE_PROJECT_REPONAME
      - run: echo $CIRCLE_BRANCH
      - run: echo $CIRCLE_TAG

      # Install dependences
      #- run: sh/build-centos.sh
      # Make
      - run: ./autogen.sh --prefix=/usr
      - run: make
      # Test
      #- run: app/teovpn -?
      - run: make test


  tagged-build-centos:
    docker: # run the steps with Docker
      - image: teonet-co-docker-d.bintray.io/ci/centos_teonet
    steps:
      - checkout
      - run: git submodule update --init --recursive

      # show current variables
      - run: echo $CIRCLE_PROJECT_REPONAME
      - run: echo $CIRCLE_BRANCH
      - run: echo $CIRCLE_TAG

      # Install dependences
      #- run: sh/build-centos.sh
      # Make
      - run: ./autogen.sh --prefix=/usr
      - run: make
      # Test
      #- run: app/teovpn -?
      - run: make test

      # Build RPM package and upload it to repository
      #- run: sh/make_package yum


  tagged-build-opensuse:
    docker: # run the steps with Docker
      - image: teonet-co-docker-d.bintray.io/ci/opensuse_teonet
    steps:
      - checkout
      - run: git submodule update --init --recursive

      # show current variables
      - run: echo $CIRCLE_PROJECT_REPONAME
      - run: echo $CIRCLE_BRANCH
      - run: echo $CIRCLE_TAG

      # Install dependences
      #- run: sh/build-opensuse.sh
      # Make
      - run: ./autogen.sh --prefix=/usr
      - run: make
      # Test
      #- run: app/teovpn -?
      - run: make test

      # Build RPM package and upload it to repository
      - run: sh/make_package zyp


  # tagged-build-docker:
  #   #machine: true      
  #   machine: #true
  #     docker_layer_caching: true    # default - false
  #   steps:
  #     - checkout  
  #     # build the application image
  #     - run: sudo sysctl -w net.ipv4.ip_forward=1
  #     - run: docker build --no-cache -t $CIRCLE_PROJECT_REPONAME -f sh/Dockerfile .

  #     # Check created image
  #     - run: docker run -it --rm --name $CIRCLE_PROJECT_REPONAME $CIRCLE_PROJECT_REPONAME teovpn -?

  #     # deploy the image
  #     - run: docker tag $CIRCLE_PROJECT_REPONAME gitlab.ksproject.org:5000/teonet/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
  #     - run: docker push gitlab.ksproject.org:5000/teonet/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
  #     #
  #     - run: docker tag $CIRCLE_PROJECT_REPONAME gitlab.ksproject.org:5000/teonet/$CIRCLE_PROJECT_REPONAME:latest
  #     - run: docker push gitlab.ksproject.org:5000/teonet/$CIRCLE_PROJECT_REPONAME:latest


  testing: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/mern-starter # directory where steps will run
    docker: # run the steps with Docker
      - image: circleci/node # ...with this image as the primary container; this is where all `steps` will run
    steps: # a collection of executable commands
       - run: echo Run tests of $CIRCLE_PROJECT_REPONAME project
#      - checkout # special step to check out source code to working directory
#      - run:
#          name: update-npm
#          command: 'sudo npm install -g npm@latest'
#      - restore_cache: # special step to restore the dependency cache
#          key: dependency-cache-{{ checksum "package.json" }}
#      - run:
#          name: install-npm-wee
#          command: npm install
#      - save_cache: # special step to save the dependency cache
#          key: dependency-cache-{{ checksum "package.json" }}
#          paths:
#            - ./node_modules
#      - run: # run tests
#          name: test
#          command: npm test


workflows:
  version: 2  
  un-tagged:
    jobs:
      - testing:
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: /^v.*/

      - publish-ubuntu:
          context: CI_BUILD
          requires:
            - testing
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: /^v.*/

      - install-ubuntu-clear:
          context: CI_BUILD
          requires:
            - publish-ubuntu
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: /^v.*/

#      - un-tagged-build-centos:
#          requires:
#            - testing
#          filters:
#            tags:
#              ignore: /^v.*/


  # skipped:
  #   jobs:
  #     - testing:
  #         filters:
  #           branches:
  #             only: /~master/
  #           tags:
  #             ignore: /^v.*/

  tagged:
    jobs:
      - testing:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      - tagged-build-ubuntu:
          context: CI_BUILD
          requires:
            - testing
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

#      - tagged-build-centos:
#          requires:
#            - testing
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /^v.*/

#      - tagged-build-opensuse:
#          requires:
#            - testing
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /^v.*/

#       - tagged-build-docker:
#           requires:
#             - tagged-build-ubuntu
# #            - tagged-build-centos
# #            - tagged-build-opensuse
#           filters:
#             branches:
#               ignore: /.*/
#             tags:
#               only: /^v.*/
